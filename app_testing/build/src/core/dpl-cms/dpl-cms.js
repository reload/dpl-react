"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useProxyUrlGET = exports.getProxyUrlGETQueryKey = exports.proxyUrlGET = exports.useDplDasDigitalArticleOrderPOST = exports.dplDasDigitalArticleOrderPOST = exports.useCampaignMatchPOST = exports.campaignMatchPOST = void 0;
/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * DPL CMS - REST API
 * The REST API provide by the core REST module.
 * OpenAPI spec version: Versioning not supported
 */
const react_query_1 = require("react-query");
const fetcher_1 = require("./mutator/fetcher");
/**
 * @summary Get campaign matching search result facets
 */
const campaignMatchPOST = (campaignMatchPOSTBodyItem, params) => {
    return (0, fetcher_1.fetcher)({
        url: `/dpl_campaign/match`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: campaignMatchPOSTBodyItem,
        params
    });
};
exports.campaignMatchPOST = campaignMatchPOST;
const useCampaignMatchPOST = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data, params } = props ?? {};
        return (0, exports.campaignMatchPOST)(data, params);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useCampaignMatchPOST = useCampaignMatchPOST;
/**
 * @summary Digital Article Order
 */
const dplDasDigitalArticleOrderPOST = (dplDasDigitalArticleOrderPOSTBody, params) => {
    return (0, fetcher_1.fetcher)({
        url: `/dpl_das/order`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: dplDasDigitalArticleOrderPOSTBody,
        params
    });
};
exports.dplDasDigitalArticleOrderPOST = dplDasDigitalArticleOrderPOST;
const useDplDasDigitalArticleOrderPOST = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data, params } = props ?? {};
        return (0, exports.dplDasDigitalArticleOrderPOST)(data, params);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useDplDasDigitalArticleOrderPOST = useDplDasDigitalArticleOrderPOST;
/**
 * @summary Generate proxy url
 */
const proxyUrlGET = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/dpl-url-proxy`,
        method: "get",
        signal,
        params
    });
};
exports.proxyUrlGET = proxyUrlGET;
const getProxyUrlGETQueryKey = (params) => [
    `/dpl-url-proxy`,
    ...(params ? [params] : [])
];
exports.getProxyUrlGETQueryKey = getProxyUrlGETQueryKey;
const useProxyUrlGET = (params, queryOptions) => {
    const queryKey = queryOptions?.queryKey ?? (0, exports.getProxyUrlGETQueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.proxyUrlGET)(params);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useProxyUrlGET = useProxyUrlGET;
