"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRemoveItem = exports.removeItem = exports.useAddItem = exports.addItem = exports.useHasItem = exports.hasItem = exports.useGetList = exports.getGetListQueryKey = exports.getList = void 0;
/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Collection List
 * OpenAPI spec version: 2.0.0
 */
const react_query_1 = require("react-query");
const fetcher_1 = require("./mutator/fetcher");
/**
 * Get list with collections.
 */
const getList = (listId, params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/list/${listId}`,
        method: "get",
        signal,
        params
    });
};
exports.getList = getList;
const getGetListQueryKey = (listId, params) => [
    `/list/${listId}`,
    ...(params ? [params] : [])
];
exports.getGetListQueryKey = getGetListQueryKey;
const useGetList = (listId, params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetListQueryKey)(listId, params);
    const queryFn = ({ signal }) => (0, exports.getList)(listId, params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, { enabled: !!listId, ...queryOptions });
    return {
        queryKey,
        ...query
    };
};
exports.useGetList = useGetList;
/**
 * Check existence of a collection on a list. To check multiple collections in one request, see the collection_ids query parameter on /list/{listId}.
 */
const hasItem = (listId, itemId, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/list/${listId}/${itemId}`,
        method: "head",
        signal
    });
};
exports.hasItem = hasItem;
const useHasItem = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { listId, itemId } = props ?? {};
        return (0, exports.hasItem)(listId, itemId);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useHasItem = useHasItem;
/**
 * Add collection to the the list.
 */
const addItem = (listId, itemId) => {
    return (0, fetcher_1.fetcher)({ url: `/list/${listId}/${itemId}`, method: "put" });
};
exports.addItem = addItem;
const useAddItem = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { listId, itemId } = props ?? {};
        return (0, exports.addItem)(listId, itemId);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useAddItem = useAddItem;
/**
 * Delete collection from list.
 */
const removeItem = (listId, itemId) => {
    return (0, fetcher_1.fetcher)({ url: `/list/${listId}/${itemId}`, method: "delete" });
};
exports.removeItem = removeItem;
const useRemoveItem = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { listId, itemId } = props ?? {};
        return (0, exports.removeItem)(listId, itemId);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useRemoveItem = useRemoveItem;
