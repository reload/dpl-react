"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDeleteV1UserReservationsIdentifier = exports.deleteV1UserReservationsIdentifier = exports.usePatchV1UserReservationsIdentifier = exports.patchV1UserReservationsIdentifier = exports.usePostV1UserReservationsIdentifier = exports.postV1UserReservationsIdentifier = exports.useGetV1UserReservations = exports.getGetV1UserReservationsQueryKey = exports.getV1UserReservations = exports.useGetV1Products = exports.getGetV1ProductsQueryKey = exports.getV1Products = exports.useGetV1ProductsIdentifier = exports.getGetV1ProductsIdentifierQueryKey = exports.getV1ProductsIdentifier = exports.usePostV1Loanstatus = exports.postV1Loanstatus = exports.useGetV1LoanstatusIdentifier = exports.getGetV1LoanstatusIdentifierQueryKey = exports.getV1LoanstatusIdentifier = exports.usePostV1UserLoansIdentifier = exports.postV1UserLoansIdentifier = exports.useGetV1UserLoansIdentifier = exports.getGetV1UserLoansIdentifierQueryKey = exports.getV1UserLoansIdentifier = exports.useGetV1UserLoans = exports.getGetV1UserLoansQueryKey = exports.getV1UserLoans = exports.useGetV1LibraryProfile = exports.getGetV1LibraryProfileQueryKey = exports.getV1LibraryProfile = exports.useDeleteV1UserChecklistIdentifier = exports.deleteV1UserChecklistIdentifier = exports.usePostV1UserChecklistIdentifier = exports.postV1UserChecklistIdentifier = exports.useGetV1UserChecklist = exports.getGetV1UserChecklistQueryKey = exports.getV1UserChecklist = exports.useGetV1UserCardnumberFriendly = exports.getGetV1UserCardnumberFriendlyQueryKey = exports.getV1UserCardnumberFriendly = void 0;
/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Publizon Library API
 * Pubhub exists in two separate environments, each with their own server, code and database. Please use the web service located at library-api.qa.pubhub.dk when developing and testing.
Orders/loans created in test environment will not be invoiced. Please request a new license key for the production environment when you're ready to go live.
 * OpenAPI spec version: 1
 */
const react_query_1 = require("react-query");
const fetcher_1 = require("./mutator/fetcher");
/**
 * Sample **request**:
            
    GET /friendly
    {
        "name": "Some name"
    }
 * @summary Gets the user's friendly card number.
 */
const getV1UserCardnumberFriendly = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/cardnumber/friendly`,
        method: "get",
        signal
    });
};
exports.getV1UserCardnumberFriendly = getV1UserCardnumberFriendly;
const getGetV1UserCardnumberFriendlyQueryKey = () => [
    `/v1/user/cardnumber/friendly`
];
exports.getGetV1UserCardnumberFriendlyQueryKey = getGetV1UserCardnumberFriendlyQueryKey;
const useGetV1UserCardnumberFriendly = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1UserCardnumberFriendlyQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getV1UserCardnumberFriendly)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1UserCardnumberFriendly = useGetV1UserCardnumberFriendly;
/**
 * @summary List all checklist items of the user.
 */
const getV1UserChecklist = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/checklist`,
        method: "get",
        signal
    });
};
exports.getV1UserChecklist = getV1UserChecklist;
const getGetV1UserChecklistQueryKey = () => [`/v1/user/checklist`];
exports.getGetV1UserChecklistQueryKey = getGetV1UserChecklistQueryKey;
const useGetV1UserChecklist = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1UserChecklistQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getV1UserChecklist)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1UserChecklist = useGetV1UserChecklist;
/**
 * @summary Add a book to the user's checklist.
 */
const postV1UserChecklistIdentifier = (identifier) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/checklist/${identifier}`,
        method: "post"
    });
};
exports.postV1UserChecklistIdentifier = postV1UserChecklistIdentifier;
const usePostV1UserChecklistIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier } = props ?? {};
        return (0, exports.postV1UserChecklistIdentifier)(identifier);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.usePostV1UserChecklistIdentifier = usePostV1UserChecklistIdentifier;
/**
 * @summary Delete a book from the user's checklist.
 */
const deleteV1UserChecklistIdentifier = (identifier) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/checklist/${identifier}`,
        method: "delete"
    });
};
exports.deleteV1UserChecklistIdentifier = deleteV1UserChecklistIdentifier;
const useDeleteV1UserChecklistIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier } = props ?? {};
        return (0, exports.deleteV1UserChecklistIdentifier)(identifier);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useDeleteV1UserChecklistIdentifier = useDeleteV1UserChecklistIdentifier;
const getV1LibraryProfile = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/library/profile`,
        method: "get",
        signal
    });
};
exports.getV1LibraryProfile = getV1LibraryProfile;
const getGetV1LibraryProfileQueryKey = () => [`/v1/library/profile`];
exports.getGetV1LibraryProfileQueryKey = getGetV1LibraryProfileQueryKey;
const useGetV1LibraryProfile = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1LibraryProfileQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getV1LibraryProfile)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1LibraryProfile = useGetV1LibraryProfile;
/**
 * @summary Lists all active loans of the user.
 */
const getV1UserLoans = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/loans`,
        method: "get",
        signal,
        params
    });
};
exports.getV1UserLoans = getV1UserLoans;
const getGetV1UserLoansQueryKey = (params) => [
    `/v1/user/loans`,
    ...(params ? [params] : [])
];
exports.getGetV1UserLoansQueryKey = getGetV1UserLoansQueryKey;
const useGetV1UserLoans = (params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1UserLoansQueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.getV1UserLoans)(params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1UserLoans = useGetV1UserLoans;
/**
 * @summary Gets details of a specific loan.
 */
const getV1UserLoansIdentifier = (identifier, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/loans/${identifier}`,
        method: "get",
        signal
    });
};
exports.getV1UserLoansIdentifier = getV1UserLoansIdentifier;
const getGetV1UserLoansIdentifierQueryKey = (identifier) => [
    `/v1/user/loans/${identifier}`
];
exports.getGetV1UserLoansIdentifierQueryKey = getGetV1UserLoansIdentifierQueryKey;
const useGetV1UserLoansIdentifier = (identifier, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1UserLoansIdentifierQueryKey)(identifier);
    const queryFn = ({ signal }) => (0, exports.getV1UserLoansIdentifier)(identifier, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1UserLoansIdentifier = useGetV1UserLoansIdentifier;
/**
 * @summary Creates a new loan.
 */
const postV1UserLoansIdentifier = (identifier, params) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/loans/${identifier}`,
        method: "post",
        params
    });
};
exports.postV1UserLoansIdentifier = postV1UserLoansIdentifier;
const usePostV1UserLoansIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier, params } = props ?? {};
        return (0, exports.postV1UserLoansIdentifier)(identifier, params);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.usePostV1UserLoansIdentifier = usePostV1UserLoansIdentifier;
/**
 * @summary Get loan status of a specific product.
 */
const getV1LoanstatusIdentifier = (identifier, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/loanstatus/${identifier}`,
        method: "get",
        signal
    });
};
exports.getV1LoanstatusIdentifier = getV1LoanstatusIdentifier;
const getGetV1LoanstatusIdentifierQueryKey = (identifier) => [
    `/v1/loanstatus/${identifier}`
];
exports.getGetV1LoanstatusIdentifierQueryKey = getGetV1LoanstatusIdentifierQueryKey;
const useGetV1LoanstatusIdentifier = (identifier, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1LoanstatusIdentifierQueryKey)(identifier);
    const queryFn = ({ signal }) => (0, exports.getV1LoanstatusIdentifier)(identifier, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1LoanstatusIdentifier = useGetV1LoanstatusIdentifier;
/**
 * @summary Get loan status of all products.
 */
const postV1Loanstatus = (postV1LoanstatusBody) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/loanstatus`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: postV1LoanstatusBody
    });
};
exports.postV1Loanstatus = postV1Loanstatus;
const usePostV1Loanstatus = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.postV1Loanstatus)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.usePostV1Loanstatus = usePostV1Loanstatus;
/**
 * @summary Get a specific product.
 */
const getV1ProductsIdentifier = (identifier, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/products/${identifier}`,
        method: "get",
        signal
    });
};
exports.getV1ProductsIdentifier = getV1ProductsIdentifier;
const getGetV1ProductsIdentifierQueryKey = (identifier) => [
    `/v1/products/${identifier}`
];
exports.getGetV1ProductsIdentifierQueryKey = getGetV1ProductsIdentifierQueryKey;
const useGetV1ProductsIdentifier = (identifier, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1ProductsIdentifierQueryKey)(identifier);
    const queryFn = ({ signal }) => (0, exports.getV1ProductsIdentifier)(identifier, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, { enabled: !!identifier, ...queryOptions });
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1ProductsIdentifier = useGetV1ProductsIdentifier;
/**
 * @summary List all products.
 */
const getV1Products = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/products`,
        method: "get",
        signal
    });
};
exports.getV1Products = getV1Products;
const getGetV1ProductsQueryKey = () => [`/v1/products`];
exports.getGetV1ProductsQueryKey = getGetV1ProductsQueryKey;
const useGetV1Products = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1ProductsQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getV1Products)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1Products = useGetV1Products;
/**
 * @summary Lists all reservations of the user.
 */
const getV1UserReservations = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/reservations`,
        method: "get",
        signal
    });
};
exports.getV1UserReservations = getV1UserReservations;
const getGetV1UserReservationsQueryKey = () => [`/v1/user/reservations`];
exports.getGetV1UserReservationsQueryKey = getGetV1UserReservationsQueryKey;
const useGetV1UserReservations = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetV1UserReservationsQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getV1UserReservations)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetV1UserReservations = useGetV1UserReservations;
/**
 * @summary Creates a new reservation.
 */
const postV1UserReservationsIdentifier = (identifier, reservationInput) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/reservations/${identifier}`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: reservationInput
    });
};
exports.postV1UserReservationsIdentifier = postV1UserReservationsIdentifier;
const usePostV1UserReservationsIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier, data } = props ?? {};
        return (0, exports.postV1UserReservationsIdentifier)(identifier, data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.usePostV1UserReservationsIdentifier = usePostV1UserReservationsIdentifier;
/**
 * @summary Updates the phone number and email address of a specific reservation.
 */
const patchV1UserReservationsIdentifier = (identifier, reservationInput) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/reservations/${identifier}`,
        method: "patch",
        headers: { "Content-Type": "application/json" },
        data: reservationInput
    });
};
exports.patchV1UserReservationsIdentifier = patchV1UserReservationsIdentifier;
const usePatchV1UserReservationsIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier, data } = props ?? {};
        return (0, exports.patchV1UserReservationsIdentifier)(identifier, data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.usePatchV1UserReservationsIdentifier = usePatchV1UserReservationsIdentifier;
/**
 * @summary Cancels a reservation.
 */
const deleteV1UserReservationsIdentifier = (identifier) => {
    return (0, fetcher_1.fetcher)({
        url: `/v1/user/reservations/${identifier}`,
        method: "delete"
    });
};
exports.deleteV1UserReservationsIdentifier = deleteV1UserReservationsIdentifier;
const useDeleteV1UserReservationsIdentifier = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { identifier } = props ?? {};
        return (0, exports.deleteV1UserReservationsIdentifier)(identifier);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useDeleteV1UserReservationsIdentifier = useDeleteV1UserReservationsIdentifier;
