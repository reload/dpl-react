"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUpdateV5 = exports.updateV5 = exports.useGetPatronInformationByPatronIdV2 = exports.getGetPatronInformationByPatronIdV2QueryKey = exports.getPatronInformationByPatronIdV2 = exports.useGetLoansV2 = exports.getGetLoansV2QueryKey = exports.getLoansV2 = exports.useRenewLoansV2 = exports.renewLoansV2 = exports.useUpdateGuardian = exports.updateGuardian = exports.useCreateWithGuardian = exports.createWithGuardian = exports.useCreateV4 = exports.createV4 = exports.useGetFeesV2 = exports.getGetFeesV2QueryKey = exports.getFeesV2 = exports.useGetHoldingsV3 = exports.getGetHoldingsV3QueryKey = exports.getHoldingsV3 = exports.useGetAvailabilityV3 = exports.getGetAvailabilityV3QueryKey = exports.getAvailabilityV3 = exports.useAddReservationsV2 = exports.addReservationsV2 = exports.useGetReservationsV2 = exports.getGetReservationsV2QueryKey = exports.getReservationsV2 = exports.useUpdateReservations = exports.updateReservations = exports.useAddReservationsDeprecated = exports.addReservationsDeprecated = exports.useGetReservations = exports.getGetReservationsQueryKey = exports.getReservations = exports.useDeleteReservations = exports.deleteReservations = exports.useGetBranches = exports.getGetBranchesQueryKey = exports.getBranches = void 0;
/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * FBS Adapter
 * OpenAPI spec version: 1.0
 */
const react_query_1 = require("react-query");
const fetcher_1 = require("./mutator/fetcher");
/**
 *
 Returns array of branches.
 <p>Can be used for giving the patron the option of choosing a preferred branch or where to pick up
 reservations.</p>
 * @summary Get branches for an agency.
 */
const getBranches = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/branches`,
        method: "get",
        signal,
        params
    });
};
exports.getBranches = getBranches;
const getGetBranchesQueryKey = (params) => [
    `/external/v1/agencyid/branches`,
    ...(params ? [params] : [])
];
exports.getGetBranchesQueryKey = getGetBranchesQueryKey;
const useGetBranches = (params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetBranchesQueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.getBranches)(params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetBranches = useGetBranches;
/**
 * @summary Delete existing reservations.
 */
const deleteReservations = (params) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations`,
        method: "delete",
        params
    });
};
exports.deleteReservations = deleteReservations;
const useDeleteReservations = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { params } = props ?? {};
        return (0, exports.deleteReservations)(params);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useDeleteReservations = useDeleteReservations;
/**
 *
 Returns an array of reservation details.
 <p>When the patron picks up the reserved materials,
 the reservation will no longer be returned.
 Expired or deleted reservations will not be returned.</p>

 The response contains reservation state, which can be any of these values:
 <ul>
     <li>- reserved</li>
     <li>- readyForPickup</li>
     <li>- interLibraryReservation</li>
     <li>- inTransit</li>
     <li>- other</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'
 .</p>
 The response contains loanType, which can be any of these values:
 <ul>
     <li>- loan</li>
     <li>- interLibraryLoan</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'loan'
 .</p>
 * @summary Get all unfulfilled reservations made by the patron (DEPRECATED).
 */
const getReservations = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations`,
        method: "get",
        signal
    });
};
exports.getReservations = getReservations;
const getGetReservationsQueryKey = () => [
    `/external/v1/agencyid/patrons/patronid/reservations`
];
exports.getGetReservationsQueryKey = getGetReservationsQueryKey;
const useGetReservations = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetReservationsQueryKey)();
    const queryFn = ({ signal }) => (0, exports.getReservations)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetReservations = useGetReservations;
/**
 *
 Returns an array of reservation details for the created reservations.
 <p></p>
 The response contains reservation state, which can be any of these values:
 <ul>
     <li>- reserved</li>
     <li>- readyForPickup</li>
     <li>- interLibraryReservation</li>
     <li>- inTransit</li>
     <li>- other</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'.</p>
 The response contains loanType, which can be any of these values:
 <ul>
     <li>- loan</li>
     <li>- interLibraryLoan</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'
 .</p>
 <p>
     When making a reservation of a periodical, the values to put in the PeriodicalReservation structure can be obtained
     from the periodical information retrieved with the Catalog service.
 </p>
 <p><b>This method has been deprecated use /external/v1/{agencyid}/patrons/{patronid}/reservations/add instead</b></p>
 * @summary Create new reservations for the patron (DEPRECATED).
 */
const addReservationsDeprecated = (createReservationBatch) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createReservationBatch
    });
};
exports.addReservationsDeprecated = addReservationsDeprecated;
const useAddReservationsDeprecated = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.addReservationsDeprecated)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useAddReservationsDeprecated = useAddReservationsDeprecated;
/**
 *
 Returns an array of the updated reservation details.
 <p></p>
 The response contains reservation state, which can be any of these values:
 <ul>
     <li>- reserved</li>
     <li>- readyForPickup</li>
     <li>- interLibraryReservation</li>
     <li>- inTransit</li>
     <li>- other</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'.</p>
 The response contains loanType, which can be any of these values:
 <ul>
     <li>- loan</li>
     <li>- interLibraryLoan</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'
 .</p>
 * @summary Update existing reservations.
 */
const updateReservations = (updateReservationBatch) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations`,
        method: "put",
        headers: { "Content-Type": "application/json" },
        data: updateReservationBatch
    });
};
exports.updateReservations = updateReservations;
const useUpdateReservations = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.updateReservations)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useUpdateReservations = useUpdateReservations;
/**
 *
 Returns an array of reservation details.
 <p>When the patron picks up the reserved materials,
 the reservation will no longer be returned.
 Expired or deleted reservations will not be returned.</p>

 The response contains reservation state, which can be any of these values:
 <ul>
     <li>- reserved</li>
     <li>- readyForPickup</li>
     <li>- interLibraryReservation</li>
     <li>- inTransit</li>
     <li>- other</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'
 .</p>
 The response contains reservationType, which can be any of these values:
 <ul>
     <li>- NORMAL</li>
     <li>- PARALLEL</li>
     <li>- SERIAL</li>
     <li>- INTER_LIBRARY</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, iit should be treated as 'normal'</p>
 <p>The response contains a transactionId, which links together parallel reservations.</p>
 * @summary Get all unfulfilled reservations made by the patron.
 */
const getReservationsV2 = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations/v2`,
        method: "get",
        signal
    });
};
exports.getReservationsV2 = getReservationsV2;
const getGetReservationsV2QueryKey = () => [
    `/external/v1/agencyid/patrons/patronid/reservations/v2`
];
exports.getGetReservationsV2QueryKey = getGetReservationsV2QueryKey;
const useGetReservationsV2 = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetReservationsV2QueryKey)();
    const queryFn = ({ signal }) => (0, exports.getReservationsV2)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetReservationsV2 = useGetReservationsV2;
/**
 *
 <p>Given a CreateReservationBatch, it creates a list of reservations and returns a ReservationResponse.</p>
 <p>The CreateReservationBatch.type indicates the reservation type of the request. If left out the request will be considered of type
 normal. The type can be any of the following values:</p>
 <ul>
     <li>- normal</li>
     <li>- parallel</li>
 </ul>
 <p>The values are subject to change.</p>

 <p>ReservationResponse.success indicates if the reservations were created sucessfully. If any of the reservations have failed then all
 reservations will be failed and ReservationResponse.success will be false. If all reservations are successfully created ReservationResponse.success will be true.

 <p></p>

 <p>ReservationResponse.reservationResults contains details about each reservation.
 A ReservationResult.result has the status of a reservation and can be any of the following values:</p>
 <ul>
     <li>- success</li>
     <li>- patron_is_blocked</li>
     <li>- patron_not_found</li>
     <li>- already_reserved</li>
     <li>- already_loaned</li>
     <li>- material_not_loanable</li>
     <li>- material_not_reservable</li>
     <li>- material_lost</li>
     <li>- material_Discarded</li>
     <li>- loaning_profile_not_found</li>
     <li>- material_not_found</li>
     <li>- material_part_of_collection</li>
     <li>- not_reservable</li>
     <li>- no_reservable_materials</li>
     <li>- interlibrary_material_not_reservable</li>
     <li>- previously_loaned_by_homebound_patron</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as an error.</p>

 <p></p>

 The reservation detail in the response contains a reservation state, which can be any of these values:
 <ul>
     <li>- reserved</li>
     <li>- readyForPickup</li>
     <li>- interLibraryReservation</li>
     <li>- inTransit</li>
     <li>- other</li>
 </ul>
 <p>The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other'.</p>

 <p></p>

 <p>
     When making a reservation of a periodical, the values to put in the PeriodicalReservation structure can be obtained
     from the periodical information retrieved with the Catalog service.
 </p>
 * @summary Create new reservations for the patron.
 */
const addReservationsV2 = (createReservationBatchV2) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/v1/agencyid/patrons/patronid/reservations/v2`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createReservationBatchV2
    });
};
exports.addReservationsV2 = addReservationsV2;
const useAddReservationsV2 = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.addReservationsV2)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useAddReservationsV2 = useAddReservationsV2;
/**
 *
 Returns an array of availability for each bibliographical record.
 * @summary Get availability of bibliographical records.
 */
const getAvailabilityV3 = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/catalog/availability/v3`,
        method: "get",
        signal,
        params
    });
};
exports.getAvailabilityV3 = getAvailabilityV3;
const getGetAvailabilityV3QueryKey = (params) => [
    `/external/agencyid/catalog/availability/v3`,
    ...(params ? [params] : [])
];
exports.getGetAvailabilityV3QueryKey = getGetAvailabilityV3QueryKey;
const useGetAvailabilityV3 = (params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetAvailabilityV3QueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.getAvailabilityV3)(params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetAvailabilityV3 = useGetAvailabilityV3;
/**
 *
 Returns an array of holdings for each bibliographical record.
 The holdings lists the materials on each placement, and whether they are available on-shelf or lent out.
 * @summary Get placement holdings for bibliographical records.
 */
const getHoldingsV3 = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/catalog/holdings/v3`,
        method: "get",
        signal,
        params
    });
};
exports.getHoldingsV3 = getHoldingsV3;
const getGetHoldingsV3QueryKey = (params) => [
    `/external/agencyid/catalog/holdings/v3`,
    ...(params ? [params] : [])
];
exports.getGetHoldingsV3QueryKey = getGetHoldingsV3QueryKey;
const useGetHoldingsV3 = (params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetHoldingsV3QueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.getHoldingsV3)(params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetHoldingsV3 = useGetHoldingsV3;
/**
 *
 Returns array of fees.
 <p>If the fee covers loaned materials, information about the materials is returned.
 Each fee in the response includes a 'type', which is used to distinguish between different types of
 fees.</p>
 <p>If the material exists no more, which is the case for fees that are related to closed interlibraryloans,
 then the fee is still returned, but without material information</p>
 The list of available types currently is
 <ul>
 <li>fee</li>
 <li>compensation</li>
 </ul>
 <p>While the type can be used by client systems to look up a suitable display message for the end user, it is
 important that unrecognized types are treated as 'other'.</p>
 * @summary List of fees in FBS for the patron with all available information about the fee.
 */
const getFeesV2 = (params, signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patron/patronid/fees/v2`,
        method: "get",
        signal,
        params
    });
};
exports.getFeesV2 = getFeesV2;
const getGetFeesV2QueryKey = (params) => [
    `/external/agencyid/patron/patronid/fees/v2`,
    ...(params ? [params] : [])
];
exports.getGetFeesV2QueryKey = getGetFeesV2QueryKey;
const useGetFeesV2 = (params, options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetFeesV2QueryKey)(params);
    const queryFn = ({ signal }) => (0, exports.getFeesV2)(params, signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetFeesV2 = useGetFeesV2;
/**
 *
 When a patron doesn't have a patron account in the library system, but logs in using a trusted authentication
 source (e.g NemId), the patron account can be created using this service. Name and address will be automatically
 fetched from CPR-Registry, and cannot be supplied by the client. If the CPR-Registry is not authorized to
 provide information about the patron, then repsonse message 404 will be sent back
 <p></p>
 If a patron is blocked the reason is available as a code:
 <ul>
     <li>- 'O': library card stolen</li>
     <li>- 'U': exclusion</li>
     <li>- 'F': extended exclusion</li>
     <li>- 'S': blocked by self service automaton</li>
     <li>- 'W': self created at website</li>
 </ul>
 <p>The codes are informational, and can be used for looking up end user messages by the client system. However,
 the list is subject to change at any time, so any unexpected values should be interpreted as 'other reason'.</p>
 * @summary Create a new patron who is a person.
 */
const createV4 = (createPatronRequestV3) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/v4`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createPatronRequestV3
    });
};
exports.createV4 = createV4;
const useCreateV4 = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.createV4)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useCreateV4 = useCreateV4;
/**
 *

 Returns the id of the patron if the request succeeds.
 Name and address will be automatically fetched from the CPR-Registry.
 <p>If the CPR-Registry is not authorized to provide information about the patron, then response message 404 will be sent back.</p>
 <p>If the supplied cpr number of the patron equals that of the guardian, then response message 400 will be sent back.</p>
 <p>If the email of the guardian is invalid, then response message 400 will be sent back.</p>
 <p>If an email or phone number for the patron is supplied and it is invalid, then response message 400 will be sent back.</p>
 <p>In case of a successful creation of the patron, a confirmation email is sent to the guardian.
 In case of failure an email is sent to guardian stating the creation failed.</p>
 * @summary Creates a person patron with a guardian (eg A financial responsible).
 */
const createWithGuardian = (patronWithGuardianRequest) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/withGuardian/v1`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: patronWithGuardianRequest
    });
};
exports.createWithGuardian = createWithGuardian;
const useCreateWithGuardian = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.createWithGuardian)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useCreateWithGuardian = useCreateWithGuardian;
/**
 *
 If the person doesn't have a guardian, a new one is created with the information provided.

 Returns the id of the patron if the request succeeds.
 Name and address will be automatically fetched from the CPR-Registry.
 <p>If the CPR-Registry is not authorized to provide information about the patron and guardian, then response message 404 will be sent back.</p>
 <p>If the supplied cpr number of the patron equals that of the guardian, then response message 400 will be sent back.</p>
 <p>If the email of the guardian is invalid, then response message 400 will be sent back.</p>
 <p>In case of a successful update of the guardian, a confirmation email is sent to the guardian.
 In case of failure an email is sent to guardian stating the update failed.</p>
 * @summary Updates a person patron's guardian (eg A financial responsible).
 */
const updateGuardian = (updateGuardianRequest) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/withGuardian/v1`,
        method: "put",
        headers: { "Content-Type": "application/json" },
        data: updateGuardianRequest
    });
};
exports.updateGuardian = updateGuardian;
const useUpdateGuardian = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.updateGuardian)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useUpdateGuardian = useUpdateGuardian;
/**
 *
 Returns an array of the updated loans.
 <p>
 If the materials could not be renewed, the return date will be unchanged.
 </p>

 The response field renewalStatus will contain a list of one or more of these values:
 <ul>
 <li>- renewed</li>
 <li>- deniedReserved</li>
 <li>- deniedMaxRenewalsReached</li>
 <li>- deniedLoanerIsBlocked</li>
 <li>- deniedMaterialIsNotLoanable</li>
 <li>- deniedMaterialIsNotFound</li>
 <li>- deniedLoanerNotFound</li>
 <li>- deniedLoaningProfileNotFound</li>
 <li>- deniedOtherReason</li>
 </ul>
 <p>
 If any other value is encountered then it must be treated as 'deniedOtherReason'.
 </p>
 The response contains the field loanDetails.loanType, which can be any of these values:
 <ul>
 <li>- loan</li>
 <li>- interLibraryLoan</li>
 </ul>
 <p>
 The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other' .
 </p>
 * @summary Renew loans.
 */
const renewLoansV2 = (renewLoansV2Body) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/patronid/loans/renew/v2`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: renewLoansV2Body
    });
};
exports.renewLoansV2 = renewLoansV2;
const useRenewLoansV2 = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.renewLoansV2)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useRenewLoansV2 = useRenewLoansV2;
/**
 *
 Returns an array of loans.
 <p>
 </p>
 If a loan is not renewable then the field renewalStatus will contain a list of one or more of these values:
 <ul>
 <li>- deniedReserved</li>
 <li>- deniedMaxRenewalsReached</li>
 <li>- deniedLoanerIsBlocked</li>
 <li>- deniedMaterialIsNotLoanable</li>
 <li>- deniedMaterialIsNotFound</li>
 <li>- deniedLoanerNotFound</li>
 <li>- deniedLoaningProfileNotFound</li>
 <li>- deniedOtherReason</li>
 </ul>
 <p>
 If any other value is encountered then it must be treated as 'deniedOtherReason'.
 </p>
 The response contains the field loanDetails.loanType, which can be any of these values:
 <ul>
 <li>- loan</li>
 <li>- interLibraryLoan</li>
 </ul>
 <p>
 The values are subject to change. If an unrecognized value is encountered, it should be treated as 'other' .
 </p>
 <p>
 NOTE: Cicero can decide to skip evaluation of the returned loans to minimize response time for loaners with
 many loans. In that case isRenewable will have the value true, as if it were a successful validation.
 </p>
 * @summary Get list of current loans by the patron.
 */
const getLoansV2 = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/patronid/loans/v2`,
        method: "get",
        signal
    });
};
exports.getLoansV2 = getLoansV2;
const getGetLoansV2QueryKey = () => [
    `/external/agencyid/patrons/patronid/loans/v2`
];
exports.getGetLoansV2QueryKey = getGetLoansV2QueryKey;
const useGetLoansV2 = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetLoansV2QueryKey)();
    const queryFn = ({ signal }) => (0, exports.getLoansV2)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetLoansV2 = useGetLoansV2;
/**
 *
 <p></p>
 If a patron is blocked the reason is available as a code:
 <ul>
     <li>- 'O': library card stolen</li>
     <li>- 'U': exclusion</li>
     <li>- 'F': extended exclusion</li>
     <li>- 'S': blocked by self service automaton</li>
     <li>- 'W': self created at website</li>
 </ul>
 <p>The codes are informational, and can be used for looking up end user messages by the client system. However,
 the list is subject to change at any time, so any unexpected values should be interpreted as 'other reason'.</p>
 * @summary Returns the patron details
 */
const getPatronInformationByPatronIdV2 = (signal) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/patronid/v2`,
        method: "get",
        signal
    });
};
exports.getPatronInformationByPatronIdV2 = getPatronInformationByPatronIdV2;
const getGetPatronInformationByPatronIdV2QueryKey = () => [
    `/external/agencyid/patrons/patronid/v2`
];
exports.getGetPatronInformationByPatronIdV2QueryKey = getGetPatronInformationByPatronIdV2QueryKey;
const useGetPatronInformationByPatronIdV2 = (options) => {
    const { query: queryOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? (0, exports.getGetPatronInformationByPatronIdV2QueryKey)();
    const queryFn = ({ signal }) => (0, exports.getPatronInformationByPatronIdV2)(signal);
    const query = (0, react_query_1.useQuery)(queryKey, queryFn, queryOptions);
    return {
        queryKey,
        ...query
    };
};
exports.useGetPatronInformationByPatronIdV2 = useGetPatronInformationByPatronIdV2;
/**
 *
 The name and address cannot be supplied by the client. If the CPR-Registry is not authorized to provide
 information about the patron, then the name and address will not be updated.
 <p>It is possible to either update just the pincode, update just some patron settings, or update both.</p>
 <p></p>
 If a patron is blocked the reason is available as a code:
 <ul>
     <li>- 'O': library card stolen</li>
     <li>- 'U': exclusion</li>
     <li>- 'F': extended exclusion</li>
     <li>- 'S': blocked by self service automaton</li>
     <li>- 'W': self created at website</li>
 </ul>
 <p>The codes are informational, and can be used for looking up end user messages by the client system. However,
 the list is subject to change at any time, so any unexpected values should be interpreted as 'other reason'.</p>
 * @summary Update information about the patron.
 */
const updateV5 = (updatePatronRequestV4) => {
    return (0, fetcher_1.fetcher)({
        url: `/external/agencyid/patrons/patronid/v5`,
        method: "put",
        headers: { "Content-Type": "application/json" },
        data: updatePatronRequestV4
    });
};
exports.updateV5 = updateV5;
const useUpdateV5 = (options) => {
    const { mutation: mutationOptions } = options ?? {};
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return (0, exports.updateV5)(data);
    };
    return (0, react_query_1.useMutation)(mutationFn, mutationOptions);
};
exports.useUpdateV5 = useUpdateV5;
